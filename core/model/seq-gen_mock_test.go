// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package model

import (
	"sync"
)

// Ensure, that SeqGenMock does implement SeqGen.
// If this is not the case, regenerate this file with moq.
var _ SeqGen = &SeqGenMock{}

// SeqGenMock is a mock implementation of SeqGen.
//
// 	func TestSomethingThatUsesSeqGen(t *testing.T) {
//
// 		// make and configure a mocked SeqGen
// 		mockedSeqGen := &SeqGenMock{
// 			NextFunc: func() string {
// 				panic("mock out the Next method")
// 			},
// 		}
//
// 		// use mockedSeqGen in code that requires SeqGen
// 		// and then make assertions.
//
// 	}
type SeqGenMock struct {
	// NextFunc mocks the Next method.
	NextFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Next holds details about calls to the Next method.
		Next []struct {
		}
	}
	lockNext sync.RWMutex
}

// Next calls NextFunc.
func (mock *SeqGenMock) Next() string {
	if mock.NextFunc == nil {
		panic("SeqGenMock.NextFunc: method is nil but SeqGen.Next was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc()
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//     len(mockedSeqGen.NextCalls())
func (mock *SeqGenMock) NextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}
