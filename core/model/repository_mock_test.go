// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package model

import (
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			LoadStockFunc: func(stockID string) (Stock, error) {
// 				panic("mock out the LoadStock method")
// 			},
// 			PriceUpdatedEventExistsFunc: func(eventID string) (bool, error) {
// 				panic("mock out the PriceUpdatedEventExists method")
// 			},
// 			SubmitFunc: func(changeSet ChangeSet) error {
// 				panic("mock out the Submit method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// LoadStockFunc mocks the LoadStock method.
	LoadStockFunc func(stockID string) (Stock, error)

	// PriceUpdatedEventExistsFunc mocks the PriceUpdatedEventExists method.
	PriceUpdatedEventExistsFunc func(eventID string) (bool, error)

	// SubmitFunc mocks the Submit method.
	SubmitFunc func(changeSet ChangeSet) error

	// calls tracks calls to the methods.
	calls struct {
		// LoadStock holds details about calls to the LoadStock method.
		LoadStock []struct {
			// StockID is the stockID argument value.
			StockID string
		}
		// PriceUpdatedEventExists holds details about calls to the PriceUpdatedEventExists method.
		PriceUpdatedEventExists []struct {
			// EventID is the eventID argument value.
			EventID string
		}
		// Submit holds details about calls to the Submit method.
		Submit []struct {
			// ChangeSet is the changeSet argument value.
			ChangeSet ChangeSet
		}
	}
	lockLoadStock               sync.RWMutex
	lockPriceUpdatedEventExists sync.RWMutex
	lockSubmit                  sync.RWMutex
}

// LoadStock calls LoadStockFunc.
func (mock *RepositoryMock) LoadStock(stockID string) (Stock, error) {
	if mock.LoadStockFunc == nil {
		panic("RepositoryMock.LoadStockFunc: method is nil but Repository.LoadStock was just called")
	}
	callInfo := struct {
		StockID string
	}{
		StockID: stockID,
	}
	mock.lockLoadStock.Lock()
	mock.calls.LoadStock = append(mock.calls.LoadStock, callInfo)
	mock.lockLoadStock.Unlock()
	return mock.LoadStockFunc(stockID)
}

// LoadStockCalls gets all the calls that were made to LoadStock.
// Check the length with:
//     len(mockedRepository.LoadStockCalls())
func (mock *RepositoryMock) LoadStockCalls() []struct {
	StockID string
} {
	var calls []struct {
		StockID string
	}
	mock.lockLoadStock.RLock()
	calls = mock.calls.LoadStock
	mock.lockLoadStock.RUnlock()
	return calls
}

// PriceUpdatedEventExists calls PriceUpdatedEventExistsFunc.
func (mock *RepositoryMock) PriceUpdatedEventExists(eventID string) (bool, error) {
	if mock.PriceUpdatedEventExistsFunc == nil {
		panic("RepositoryMock.PriceUpdatedEventExistsFunc: method is nil but Repository.PriceUpdatedEventExists was just called")
	}
	callInfo := struct {
		EventID string
	}{
		EventID: eventID,
	}
	mock.lockPriceUpdatedEventExists.Lock()
	mock.calls.PriceUpdatedEventExists = append(mock.calls.PriceUpdatedEventExists, callInfo)
	mock.lockPriceUpdatedEventExists.Unlock()
	return mock.PriceUpdatedEventExistsFunc(eventID)
}

// PriceUpdatedEventExistsCalls gets all the calls that were made to PriceUpdatedEventExists.
// Check the length with:
//     len(mockedRepository.PriceUpdatedEventExistsCalls())
func (mock *RepositoryMock) PriceUpdatedEventExistsCalls() []struct {
	EventID string
} {
	var calls []struct {
		EventID string
	}
	mock.lockPriceUpdatedEventExists.RLock()
	calls = mock.calls.PriceUpdatedEventExists
	mock.lockPriceUpdatedEventExists.RUnlock()
	return calls
}

// Submit calls SubmitFunc.
func (mock *RepositoryMock) Submit(changeSet ChangeSet) error {
	if mock.SubmitFunc == nil {
		panic("RepositoryMock.SubmitFunc: method is nil but Repository.Submit was just called")
	}
	callInfo := struct {
		ChangeSet ChangeSet
	}{
		ChangeSet: changeSet,
	}
	mock.lockSubmit.Lock()
	mock.calls.Submit = append(mock.calls.Submit, callInfo)
	mock.lockSubmit.Unlock()
	return mock.SubmitFunc(changeSet)
}

// SubmitCalls gets all the calls that were made to Submit.
// Check the length with:
//     len(mockedRepository.SubmitCalls())
func (mock *RepositoryMock) SubmitCalls() []struct {
	ChangeSet ChangeSet
} {
	var calls []struct {
		ChangeSet ChangeSet
	}
	mock.lockSubmit.RLock()
	calls = mock.calls.Submit
	mock.lockSubmit.RUnlock()
	return calls
}
