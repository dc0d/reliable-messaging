// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package actions_test

import (
	"github.com/dc0d/reliable-messaging/core/model"
	"sync"
)

// Ensure, that EntityDomainServiceMock does implement model.EntityDomainService.
// If this is not the case, regenerate this file with moq.
var _ model.EntityDomainService = &EntityDomainServiceMock{}

// EntityDomainServiceMock is a mock implementation of model.EntityDomainService.
//
// 	func TestSomethingThatUsesEntityDomainService(t *testing.T) {
//
// 		// make and configure a mocked model.EntityDomainService
// 		mockedEntityDomainService := &EntityDomainServiceMock{
// 			UpdateStockFunc: func(incoming model.PriceUpdated) error {
// 				panic("mock out the UpdateStock method")
// 			},
// 		}
//
// 		// use mockedEntityDomainService in code that requires model.EntityDomainService
// 		// and then make assertions.
//
// 	}
type EntityDomainServiceMock struct {
	// UpdateStockFunc mocks the UpdateStock method.
	UpdateStockFunc func(incoming model.PriceUpdated) error

	// calls tracks calls to the methods.
	calls struct {
		// UpdateStock holds details about calls to the UpdateStock method.
		UpdateStock []struct {
			// Incoming is the incoming argument value.
			Incoming model.PriceUpdated
		}
	}
	lockUpdateStock sync.RWMutex
}

// UpdateStock calls UpdateStockFunc.
func (mock *EntityDomainServiceMock) UpdateStock(incoming model.PriceUpdated) error {
	if mock.UpdateStockFunc == nil {
		panic("EntityDomainServiceMock.UpdateStockFunc: method is nil but EntityDomainService.UpdateStock was just called")
	}
	callInfo := struct {
		Incoming model.PriceUpdated
	}{
		Incoming: incoming,
	}
	mock.lockUpdateStock.Lock()
	mock.calls.UpdateStock = append(mock.calls.UpdateStock, callInfo)
	mock.lockUpdateStock.Unlock()
	return mock.UpdateStockFunc(incoming)
}

// UpdateStockCalls gets all the calls that were made to UpdateStock.
// Check the length with:
//     len(mockedEntityDomainService.UpdateStockCalls())
func (mock *EntityDomainServiceMock) UpdateStockCalls() []struct {
	Incoming model.PriceUpdated
} {
	var calls []struct {
		Incoming model.PriceUpdated
	}
	mock.lockUpdateStock.RLock()
	calls = mock.calls.UpdateStock
	mock.lockUpdateStock.RUnlock()
	return calls
}
